# Node class for the binary tree
class Node:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None

# Convert binary tree to DLL
def binary_tree_to_dll(root):
    if root is None:
        return None

    # Convert the left subtree
    left_dll = binary_tree_to_dll(root.left)

    # Find the inorder predecessor (rightmost node) of the current root
    predecessor = left_dll
    while predecessor and predecessor.right:
        predecessor = predecessor.right

    # Make the current root as the right child of its inorder predecessor
    if predecessor:
        predecessor.right = root
    root.left = predecessor

    # Convert the right subtree
    right_dll = binary_tree_to_dll(root.right)

    # Make the leftmost node of the right subtree as the right child of the current root
    if right_dll:
        root.right = right_dll
        right_dll.left = root

    # Return the head of the DLL
    return left_dll if left_dll else root

# Utility function to print the DLL
def print_dll(head):
    current = head
    while current:
        print(current.data, end=" ")
        current = current.right
    print()

# Example usage
# Create a binary tree
root = Node(4)
root.left = Node(2)
root.right = Node(5)
root.left.left = Node(1)
root.left.right = Node(3)

# Convert the binary tree to DLL
head = binary_tree_to_dll(root)

# Print the DLL
print_dll(head)
