# Function to check if the given inorder, preorder, and postorder traversals are of the same tree
def is_same_tree(inorder, preorder, postorder):
    # Base cases
    if len(inorder) != len(preorder) or len(preorder) != len(postorder):
        return False
    if not inorder or not preorder or not postorder:
        return True

    # Check if the root element is the same in all three traversals
    if preorder[0] != postorder[-1]:
        return False

    # Find the root element in the inorder traversal
    root = preorder[0]
    root_index = inorder.index(root)

    # Recursively check the left and right subtrees
    left_inorder = inorder[:root_index]
    right_inorder = inorder[root_index+1:]
    left_preorder = preorder[1:root_index+1]
    right_preorder = preorder[root_index+1:]
    left_postorder = postorder[:root_index]
    right_postorder = postorder[root_index:-1]

    return is_same_tree(left_inorder, left_preorder, left_postorder) and \
           is_same_tree(right_inorder, right_preorder, right_postorder)

# Example usage
inorder = [4, 2, 5, 1, 3]
preorder = [1, 2, 4, 5, 3]
postorder = [4, 5, 2, 3, 1]

if is_same_tree(inorder, preorder, postorder):
    print("Yes")
else:
    print("No")
